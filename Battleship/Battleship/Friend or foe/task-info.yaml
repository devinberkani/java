type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/GameBoard.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Objects;
    import java.util.Scanner;

    public class GameBoard {

        static int currentGamePieceIndex = 0;
        static Scanner scanner = new Scanner(System.in);
        private final String[] rowNumbers = {" ", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
        private final String[] columnLetters = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J"};
        private String[][] gameBoard = new String[10][10];
        private final String[] gamePieceChoices = {"Aircraft Carrier", "Battleship", "Submarine", "Cruiser", "Destroyer"};
        private final String[] gamePieceChoicesLengths = {"(5 cells)", "(4 cells)", "(3 cells)", "(3 cells)", "(2 cells)"};
        private GamePiece aircraftCarrier;
        private GamePiece battleship;
        private GamePiece submarine;
        private GamePiece cruiser;
        private GamePiece destroyer;

        private ArrayList<ArrayList<Integer>> aircraftCarrierCoordinates = new ArrayList<>();
        private ArrayList<ArrayList<Integer>> battleshipCoordinates = new ArrayList<>();
        private ArrayList<ArrayList<Integer>> submarineCoordinates = new ArrayList<>();
        private ArrayList<ArrayList<Integer>> cruiserCoordinates = new ArrayList<>();
        private ArrayList<ArrayList<Integer>> destroyerCoordinates = new ArrayList<>();

        private ArrayList<ArrayList<ArrayList<Integer>>> allShipCoordinates = new ArrayList<>();

        public GameBoard() {
            // initialize empty game board
            for (String[] cell : gameBoard) {
                Arrays.fill(cell, "~");
            }
        }

        // ***** GAME BOARD *****

        public String[][] getGameBoard() {
            return gameBoard;
        }

        public void setGameBoard(String[][] gameBoard) {
            this.gameBoard = gameBoard;
        }

        public void printGameBoard() {


            // print top row of game board
            for (int i = 0; i < rowNumbers.length; i++) {
                System.out.print(rowNumbers[i]);
                if (i != rowNumbers.length - 1) {
                    System.out.print(" ");
                } else {
                    System.out.println();
                }
            }

            // list to hold all coordinates for each ship
            ArrayList<int[]> coordinatesHolder = new ArrayList<>();

            // print the rest of the game board
            for (int i = 0; i < getGameBoard().length; i++) {
                System.out.print(columnLetters[i]);
                System.out.print(" ");
                for (int j = 0; j < getGameBoard()[i].length; j++) {
                    System.out.print(getGameBoard()[i][j]);
                    if (j != getGameBoard()[i].length - 1) {
                        System.out.print(" ");
                    } else {
                        System.out.println();
                    }
                }
            }
        }

        public void printFogGameBoard() {

            // print top row of game board
            for (int i = 0; i < rowNumbers.length; i++) {
                System.out.print(rowNumbers[i]);
                if (i != rowNumbers.length - 1) {
                    System.out.print(" ");
                } else {
                    System.out.println();
                }
            }

            // print the rest of the game board
            for (int i = 0; i < getGameBoard().length; i++) {
                System.out.print(columnLetters[i]);
                System.out.print(" ");
                for (int j = 0; j < getGameBoard()[i].length; j++) {
                    if (getGameBoard()[i][j].equalsIgnoreCase("X") || getGameBoard()[i][j].equalsIgnoreCase("M")) {
                        System.out.print(getGameBoard()[i][j]);
                    } else {
                        System.out.print("~");
                    }
                    if (j != getGameBoard()[i].length - 1) {
                        System.out.print(" ");
                    } else {
                        System.out.println();
                    }
                }
            }

        }

        public ArrayList<ArrayList<ArrayList<Integer>>> getAllShipCoordinates() {
            return allShipCoordinates;
        }

        public void setAllShipCoordinates(ArrayList<ArrayList<ArrayList<Integer>>> allShipCoordinates) {
            this.allShipCoordinates = allShipCoordinates;
        }

        // ***** GAME PIECES *****
        public GamePiece getAircraftCarrier() {
            return aircraftCarrier;
        }

        public void setAircraftCarrier(GamePiece aircraftCarrier) {
            this.aircraftCarrier = aircraftCarrier;
        }

        public GamePiece getBattleship() {
            return battleship;
        }

        public void setBattleship(GamePiece battleship) {
            this.battleship = battleship;
        }

        public GamePiece getSubmarine() {
            return submarine;
        }

        public void setSubmarine(GamePiece submarine) {
            this.submarine = submarine;
        }

        public GamePiece getCruiser() {
            return cruiser;
        }

        public void setCruiser(GamePiece cruiser) {
            this.cruiser = cruiser;
        }

        public GamePiece getDestroyer() {
            return destroyer;
        }

        public void setDestroyer(GamePiece destroyer) {
            this.destroyer = destroyer;
        }

        // ***** GET COORDINATES *****

        public void getCoordinates() {

            boolean allCoordinatesReceived = false;
            boolean exceptionThrown = false;

            while (!allCoordinatesReceived) {

                if (!exceptionThrown) {
                    System.out.printf("Enter the coordinates of the %s %s:", gamePieceChoices[currentGamePieceIndex], gamePieceChoicesLengths[currentGamePieceIndex]);
                    System.out.println();
                }

                String[] coordinateStart = scanner.next().split("");
                String[] coordinateEnd = scanner.next().split("");

                // translate the coordinates into indices
                int letterCount = 0;
                for (String letter : columnLetters) {
                    if (coordinateStart[0].equalsIgnoreCase(letter)) {
                        coordinateStart[0] = String.valueOf(letterCount);
                    }
                    if (coordinateEnd[0].equalsIgnoreCase(letter)) {
                        coordinateEnd[0] = String.valueOf(letterCount);
                    }
                    letterCount++;
                }

                // handle 3 digit coordinate lengths (the number 10)

                if (coordinateStart.length > 2) {
                    coordinateStart[1] = "10";
                }
                if (coordinateEnd.length > 2) {
                    coordinateEnd[1] = "10";

                }

                // change from strings to integers
                int[] gamePieceCoordinates = new int[4];

                gamePieceCoordinates[0] = Integer.parseInt(coordinateStart[0]);
                gamePieceCoordinates[1] = Integer.parseInt(coordinateStart[1]) - 1;
                gamePieceCoordinates[2] = Integer.parseInt(coordinateEnd[0]);
                gamePieceCoordinates[3] = Integer.parseInt(coordinateEnd[1]) - 1;

                String[][] previousGameBoard;
                String[][] updatedGameBoard;

                if (currentGamePieceIndex == 0) {
                    try {
                        setAircraftCarrier(new GamePiece(getGameBoard(), gamePieceCoordinates, currentGamePieceIndex));
                        previousGameBoard = cloneCurrentGameBoard();
                        updatedGameBoard = getAircraftCarrier().setGamePiece();
                        setGameBoard(updatedGameBoard);
                        compareGameBoards(previousGameBoard);
                        printGameBoard();
                        exceptionThrown = false;
                        currentGamePieceIndex++;
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                        exceptionThrown = true;
                    }
                } else if (currentGamePieceIndex == 1) {
                    try {
                        setBattleship(new GamePiece(getGameBoard(), gamePieceCoordinates, currentGamePieceIndex));
                        previousGameBoard = cloneCurrentGameBoard();
                        updatedGameBoard = getBattleship().setGamePiece();
                        setGameBoard(updatedGameBoard);
                        compareGameBoards(previousGameBoard);
                        printGameBoard();
                        exceptionThrown = false;
                        currentGamePieceIndex++;
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                        exceptionThrown = true;
                    }
                } else if (currentGamePieceIndex == 2) {
                    try {
                        setSubmarine(new GamePiece(getGameBoard(), gamePieceCoordinates, currentGamePieceIndex));
                        previousGameBoard = cloneCurrentGameBoard();
                        updatedGameBoard = getSubmarine().setGamePiece();
                        setGameBoard(updatedGameBoard);
                        compareGameBoards(previousGameBoard);
                        printGameBoard();
                        exceptionThrown = false;
                        currentGamePieceIndex++;
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                        exceptionThrown = true;
                    }
                } else if (currentGamePieceIndex == 3) {
                    try {
                        setCruiser(new GamePiece(getGameBoard(), gamePieceCoordinates, currentGamePieceIndex));
                        previousGameBoard = cloneCurrentGameBoard();
                        updatedGameBoard = getCruiser().setGamePiece();
                        setGameBoard(updatedGameBoard);
                        compareGameBoards(previousGameBoard);
                        printGameBoard();
                        exceptionThrown = false;
                        currentGamePieceIndex++;
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                        exceptionThrown = true;
                    }
                } else {
                    try {
                        setDestroyer(new GamePiece(getGameBoard(), gamePieceCoordinates, currentGamePieceIndex));
                        previousGameBoard = cloneCurrentGameBoard();
                        updatedGameBoard = getDestroyer().setGamePiece();
                        setGameBoard(updatedGameBoard);
                        compareGameBoards(previousGameBoard);
                        currentGamePieceIndex++;
                        printGameBoard();
                        exceptionThrown = false;
                        allCoordinatesReceived = true;
                        System.out.println("The game starts!");
                        printFogGameBoard();
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                        exceptionThrown = true;
                    }
                }
            }

        }

        public String[][] cloneCurrentGameBoard() {

            String[][] previousGameBoard = new String[10][10];

            for (int i = 0; i < getGameBoard().length; i++) {
                for (int j = 0; j < getGameBoard()[i].length; j++) {
                    previousGameBoard[i][j] = getGameBoard()[i][j];
                }
            }

            return previousGameBoard;

        }

        public void compareGameBoards(String[][] previousGameBoard) {

            for (int i = 0; i < previousGameBoard.length; i++) {
                for (int j = 0; j < previousGameBoard[i].length; j++) {
                    if (!Objects.equals(previousGameBoard[i][j], getGameBoard()[i][j])) {
                        ArrayList<Integer> temporaryGamePieceCoordinates = new ArrayList<>();
                        temporaryGamePieceCoordinates.add(i);
                        temporaryGamePieceCoordinates.add(j);

                        if (currentGamePieceIndex == 0) {
                            aircraftCarrierCoordinates.add(temporaryGamePieceCoordinates);
                        } else if (currentGamePieceIndex == 1) {
                            battleshipCoordinates.add(temporaryGamePieceCoordinates);
                        } else if (currentGamePieceIndex == 2) {
                            submarineCoordinates.add(temporaryGamePieceCoordinates);
                        } else if (currentGamePieceIndex == 3) {
                            cruiserCoordinates.add(temporaryGamePieceCoordinates);
                        } else if (currentGamePieceIndex == 4) {
                            destroyerCoordinates.add(temporaryGamePieceCoordinates);
                        }

                    }
                }
            }

            if (currentGamePieceIndex == 0) {
                getAllShipCoordinates().add(aircraftCarrierCoordinates);
            } else if (currentGamePieceIndex == 1) {
                getAllShipCoordinates().add(battleshipCoordinates);
            } else if (currentGamePieceIndex == 2) {
                getAllShipCoordinates().add(submarineCoordinates);
            } else if (currentGamePieceIndex == 3) {
                getAllShipCoordinates().add(cruiserCoordinates);
            } else if (currentGamePieceIndex == 4) {
                getAllShipCoordinates().add(destroyerCoordinates);
            }

        }

        // ***** TAKE SHOT *****
        public void takeShot() {

            String hit = "X";
            String miss = "M";
            String result = "~";

            System.out.println("Take a shot!");

            int shipCount = 5;
            boolean gameComplete = false;

            while (!gameComplete) {

                String[] shotCoordinatesString = scanner.next().split("");

                if (correctShotCoordinates(shotCoordinatesString)) {

                    int[] shotCoordinatesIndices = translateShotCoordinates(shotCoordinatesString);

                    String shotLocation = getGameBoard()[shotCoordinatesIndices[0]][shotCoordinatesIndices[1]];

                    if (shotLocation.equals("~")) {
                        result = miss;
                    } else if (shotLocation.equals("O")) {
                        result = hit;
                    }

                    String[][] updatedGameboard = new String[10][10];

                    for(int i = 0; i < getGameBoard().length; i++) {
                        for (int j = 0; j < getGameBoard()[i].length; j++) {
                            if (i == shotCoordinatesIndices[0] && j == shotCoordinatesIndices[1]) {
                                updatedGameboard[i][j] = result;
                            } else {
                                updatedGameboard[i][j] = getGameBoard()[i][j];
                            }
                        }
                    }

                    setGameBoard(updatedGameboard);
                    printFogGameBoard();

                    if (result.equals(miss)) {
                        System.out.println("You missed. Try again:");
                    } else if (result.equals(hit)) {
                        if (shipSank()) {
                            shipCount--;
                            if (shipCount == 0) {
                                System.out.println("You sank the last ship. You won. Congratulations!");
                                gameComplete = true;
                            } else {
                                System.out.println("You sank a ship! Specify a new target:");
                            }
                        } else {
                            System.out.println("You hit a ship! Try again:");
                        }
                    }

                } else {
                    System.out.println("Error! You entered the wrong coordinates! Try again:");
                }
            }
        }

        public boolean shipSank() {

            for (ArrayList<ArrayList<Integer>> ship : getAllShipCoordinates()) {
                int hitCount = 0;
                for (ArrayList<Integer> coordinate : ship) {
                    int x = coordinate.get(0);
                    int y = coordinate.get(1);
                    if (getGameBoard()[x][y].equalsIgnoreCase("X")) {
                        hitCount++;
                        if (hitCount == ship.size()) {
                            getAllShipCoordinates().remove(ship);
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public boolean correctShotCoordinates (String[] shotCoordinates) {

    //        System.out.println("length of these coordinates is " + shotCoordinates.length);

            // if length of given coordinates is greater than 3
            if (shotCoordinates.length < 2 || shotCoordinates.length > 3) {
    //            System.out.println("length ok");
                return false;
            }

            // if first index isn't a letter
            boolean letterFound = false;
            for (String letter : columnLetters) {
                if (shotCoordinates[0].equalsIgnoreCase(letter)) {
    //                System.out.println("letter ok");
                    letterFound = true;
                    break;
                }
            }

            if (!letterFound) {
                return false;
            }

            // if second index is less than 1 or greater than 10
            String numberCoordinateString;
            if (shotCoordinates.length == 2) {
                numberCoordinateString = shotCoordinates[1];
    //            System.out.println("string number assigned");
            } else {
                numberCoordinateString = shotCoordinates[1] + shotCoordinates[2];
            }

            int numberCoordinate = Integer.parseInt(numberCoordinateString);

    //        System.out.println("number coordinate is " + numberCoordinate);

            if (numberCoordinate < 1 || numberCoordinate > 10) {
                return false;
            }

            return true;
        }

        public int[] translateShotCoordinates(String[] shotCoordinates) {

            int[] shotCoordinatesIndices = new int[2];

            // translate the coordinates into indices
            int letterCount = 0;
            for (String letter : columnLetters) {
                if (shotCoordinates[0].equalsIgnoreCase(letter)) {
                    shotCoordinates[0] = String.valueOf(letterCount);
                }
                letterCount++;
            }

            // handle 3 digit coordinate lengths

            if (shotCoordinates.length > 2) {
                String number = shotCoordinates[1] + shotCoordinates[2];
                shotCoordinates[1] = number;
            }

            shotCoordinatesIndices[0] = Integer.parseInt(shotCoordinates[0]);
            shotCoordinatesIndices[1] = Integer.parseInt(shotCoordinates[1]) - 1;

            return shotCoordinatesIndices;
        }

    }
  learner_created: true
- name: src/battleship/GamePiece.java
  visible: true
  text: |
    package battleship;

    public class GamePiece {

        private final String[] gamePieceChoices = {"Aircraft Carrier", "Battleship", "Submarine", "Cruiser", "Destroyer"};
        private final int[] gamePieceLengths = {5, 4, 3, 3, 2};
        private String[][] gameBoard;
        private int[] gamePieceCoordinates;

        public GamePiece(String[][] gameBoard, int[] gamePieceCoordinates, int gamePieceIndex) throws Exception {
            int x1 = gamePieceCoordinates[0];
            int x2 = gamePieceCoordinates[1];
            int y1 = gamePieceCoordinates[2];
            int y2 = gamePieceCoordinates[3];

            // catch wrong game piece location
            if (x1 != y1 && x2 != y2) {
                throw new Exception("Error! Wrong ship location! Try again:");
            // catch wrong length of game piece
            } else if ((Math.abs(x1 - y1) + 1) != gamePieceLengths[gamePieceIndex] && (Math.abs(x2 - y2) + 1) != gamePieceLengths[gamePieceIndex]) {
                throw new Exception("Error! Wrong length of the " + gamePieceChoices[gamePieceIndex] + "! Try again:"); // need to fix this
            // catch game piece being too close to another
            } else if (isTooClose(gameBoard, gamePieceCoordinates, gamePieceIndex)) {
                throw new Exception("Error! You placed it too close to another one. Try again:");
            } else {
                this.gameBoard = gameBoard;
                this.gamePieceCoordinates = gamePieceCoordinates;
            }
        }

        private boolean isTooClose(String[][] gameBoard, int[] gamePieceCoordinates, int gamePieceIndex) {
            // catch game piece being too close to another - length is good and is entered correctly

            int x1 = gamePieceCoordinates[0];
            int x2 = gamePieceCoordinates[1];
            int y1 = gamePieceCoordinates[2];
            int y2 = gamePieceCoordinates[3];

            int[][] coordinateList = new int[gamePieceLengths[gamePieceIndex]][2];

            int indexCount = 0;
            int secondIndexCount = 0;
            for (int i = 0; i < gameBoard.length; i++) {
                for (int j = 0; j < gameBoard[i].length; j++) {
                    if (x1 == y1 && i == x1) { // x is equal
                        if (x2 < y2) { // if y2 is greater...
                            if (j >= x2 && j <= y2) { // j must be less than y2
                                coordinateList[indexCount][secondIndexCount] = i;
                                secondIndexCount++;
                                coordinateList[indexCount][secondIndexCount] = j;
                                indexCount++;
                                secondIndexCount--;
                            }
                        } else {
                            if (j <= x2 && j >= y2) {
                                coordinateList[indexCount][secondIndexCount] = i;
                                secondIndexCount++;
                                coordinateList[indexCount][secondIndexCount] = j;
                                indexCount++;
                                secondIndexCount--;
                            }
                        }
                    } else if (x2 == y2 && j == x2) { // y is equal
                        if (x1 > y1) { // if x is greater...
                            if (i <= x1 && i >= y1) { // i must be less than x1
                                coordinateList[indexCount][secondIndexCount] = i;
                                secondIndexCount++;
                                coordinateList[indexCount][secondIndexCount] = j;
                                indexCount++;
                                secondIndexCount--;
                            }
                        } else {
                            if (i >= x1 && i <= y1) {
                                coordinateList[indexCount][secondIndexCount] = i;
                                secondIndexCount++;
                                coordinateList[indexCount][secondIndexCount] = j;
                                indexCount++;
                                secondIndexCount--;
                            }
                        }
                    }
                }
            }

            for (int i = 0; i < coordinateList.length; i++) {
                int currentX = coordinateList[i][0];
                int currentY = coordinateList[i][1];
                // already contains a game piece
                if (gameBoard[currentX][currentY].equals("O")) {
                    return true;
                    // check above
                }
                if ((currentX - 1) >= 0) {
                    if (gameBoard[currentX - 1][currentY].equals("O")) {
                        return true;
                    }
                    // check below
                }
                if ((currentX + 1) < gameBoard.length) {
                    if (gameBoard[currentX + 1][currentY].equals("O")) {
                        return true;
                    }
                    // check left
                }
                if ((currentY - 1) >= 0) {
                    if (gameBoard[currentX][currentY - 1].equals("O")) {
                        return true;
                    }
                }
                if ((currentY + 1) < gameBoard[0].length) {
                    if (gameBoard[currentX][currentY + 1].equals("O")) {
                        return true;
                    }
                }
            }
            return false;
        }

        public String[][] getGameBoard() {
            return gameBoard;
        }

        public void setGameBoard(String[][] gameBoard) {
            this.gameBoard = gameBoard;
        }

        public int[] getGamePieceCoordinates() {
            return gamePieceCoordinates;
        }

        public void setGamePieceCoordinates(int[] gamePieceCoordinates) {
            this.gamePieceCoordinates = gamePieceCoordinates;
        }

        public String[][] setGamePiece() {

            int x1 = getGamePieceCoordinates()[0];
            int x2 = getGamePieceCoordinates()[1];
            int y1 = getGamePieceCoordinates()[2];
            int y2 = getGamePieceCoordinates()[3];

            for (int i = 0; i < this.getGameBoard().length; i++) {
                for (int j = 0; j < getGameBoard()[i].length; j++) {
                    if (x1 == y1 && i == x1) { // x is equal
                        if (x2 < y2) { // if y2 is greater...
                            if (j >= x2 && j <= y2) { // j must be less than y2
                                getGameBoard()[i][j] = "O";
                            }
                        } else {
                            if (j <= x2 && j >= y2) {
                                getGameBoard()[i][j] = "O";
                            }
                        }
                    } else if (x2 == y2 && j == x2) { // y is equal
                        if (x1 > y1) { // if x is greater...
                            if (i <= x1 && i >= y1) { // i must be less than x1
                                getGameBoard()[i][j] = "O";
                            }
                        } else {
                            if (i >= x1 && i <= y1) {
                                getGameBoard()[i][j] = "O";
                            }
                        }
                    }
                }
            }
            return getGameBoard();
        }
    }
  learner_created: true
- name: src/battleship/BattleshipGame.java
  visible: true
  text: |
    package battleship;

    public class BattleshipGame {

        public BattleshipGame() {
            Player playerOne = new Player();
        }

        // switchPlayer() method

    }
  learner_created: true
- name: src/battleship/Player.java
  visible: true
  text: |
    package battleship;

    public class Player {

        public Player () {
            GameBoard gameBoard = new GameBoard();
            gameBoard.printGameBoard();
            gameBoard.getCoordinates();
            gameBoard.takeShot();
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 30 Jul 2022 20:57:46 UTC
record: -1
