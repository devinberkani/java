type: edu
custom_name: stage4
files:
- name: src/readability/Main.java
  visible: true
  text: |
    package readability;

    public class Main {
        public static void main(String[] args) {
            System.out.print("Hello world!");
        }
    }
  learner_created: false
- name: test/ReadabilityTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;

    import static java.lang.Math.abs;


    class TestClue {

        int words;
        int sentences;
        int characters;
        int syllables;
        int polysyllables;

        double ari;
        double fkri;
        double smog;
        double cli;

        TestClue(int words,
                 int chars,
                 int sentences,
                 int syllables,
                 int polysyllables,
                 double ari,
                 double fkri,
                 double smog,
                 double cli) {
            this.words = words;
            this.sentences = sentences;
            this.characters = chars;
            this.syllables = syllables;
            this.polysyllables = polysyllables;
            this.ari = ari;
            this.fkri = fkri;
            this.smog = smog;
            this.cli = cli;
        }
    }


    public class ReadabilityTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>().setAttach(new TestClue(
                    108,
                    580,
                    6,
                    196,
                    20,
                    12.86,
                    12.84,
                    13.56,
                    14.13))
                    .addFile("input.txt",
                        "Readability is " +
                            "the ease with which a reader can " +
                            "understand a written text. In natural " +
                            "language, the readability of text depends " +
                            "on its content and its presentation. " +
                            "Researchers have used various factors " +
                            "to measure readability. Readability is " +
                            "more than simply legibility, which is a " +
                            "measure of how easily a reader can distinguish " +
                            "individual letters or characters from each other. " +
                            "Higher readability eases reading effort and speed " +
                            "for any reader, but it is especially important for " +
                            "those who do not have high reading comprehension. " +
                            "In readers with poor reading comprehension, raising " +
                            "the readability level of a text from mediocre to good " +
                            "can make the difference between success and failure")
                    .addArguments("input.txt")
                    .setInput("all"),

                new TestCase<TestClue>().setAttach(new TestClue(
                    137,
                    687,
                    14,
                    210,
                    17,
                    7.08,
                    6.31,
                    9.42,
                    10.66))
                    .addFile("in.txt",
                        "This is the front page of the Simple English " +
                            "Wikipedia. Wikipedias are places where people work " +
                            "together to write encyclopedias in different languages. " +
                            "We use Simple English words and grammar here. The Simple " +
                            "English Wikipedia is for everyone! That includes children " +
                            "and adults who are learning English. There are 142,262 " +
                            "articles on the Simple English Wikipedia. All of the pages " +
                            "are free to use. They have all been published under both " +
                            "the Creative Commons License " +
                            "and the GNU Free Documentation License. You can help here! " +
                            "You may change these pages and make new pages. Read the help " +
                            "pages and other good pages to learn how to write pages here. " +
                            "If you need help, you may ask questions at Simple talk. Use " +
                            "Basic English vocabulary and shorter sentences. This allows " +
                            "people to understand normally complex terms or phrases.")
                    .addArguments("in.txt")
                    .setInput("all"),

                new TestCase<TestClue>().setAttach(new TestClue(
                    180,
                    982,
                    13,
                    317,
                    34,
                    11.19,
                    10.59,
                    12.37,
                    14.14))
                    .addFile("in.txt",
                        "Gothic architecture are building designs, " +
                            "as first pioneered in Western Europe in the Middle Ages. " +
                            "It began in France in the 12th century. The Gothic style " +
                            "grew out of Romanesque architecture. It lasted until the " +
                            "16th century. By that time the Renaissance style of " +
                            "architecture had become popular. The important features " +
                            "of Gothic architecture are the pointed arch, the ribbed " +
                            "vault, the flying buttress, and stained glass windows " +
                            "which are explained below. " +
                            "Gothic architecture is best known as the style of many " +
                            "of the great cathedrals, abbeys and churches of Europe. " +
                            "It is also the architecture of many castles, palaces, " +
                            "town halls, universities, and also some houses. " +
                            "Many church buildings still remain from this period. " +
                            "Even the smallest Gothic churches are often very beautiful, " +
                            "while many of the larger churches and cathedrals are " +
                            "thought to be priceless works of art. Many are listed " +
                            "with the United Nations Educational, Scientific and " +
                            "Cultural Organization (UNESCO) as World Heritage Sites. " +
                            "In the 19th century, the Gothic style became popular " +
                            "again, particularly for building churches and universities. " +
                            "This style is called Gothic Revival architecture.")
                    .addArguments("in.txt")
                    .setInput("all")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {

            reply = reply.replace("â€“", "-");

            boolean foundWords = false;
            boolean foundSentences = false;
            boolean foundChars = false;
            boolean foundSyllables = false;
            boolean foundPolysyllables = false;

            boolean foundARI = false;
            boolean foundFKT = false;
            boolean foundSMG = false;
            boolean foundCLI = false;

            for (Object lineObj : reply.lines().toArray()) {
                String initialLine = (String) lineObj;
                String line = initialLine.toLowerCase();
                if (line.contains("words:")) {

                    CheckResult wrongAnswer = new CheckResult(false, "Can't parse words count!" +
                        "\nYour output format should be like in examples.");
                    foundWords = true;

                    String[] parsedLine = line.split(":");
                    if (parsedLine.length != 2) {
                        return wrongAnswer;
                    }

                    int words;
                    try {
                        words = (int) Double.parseDouble(parsedLine[1].strip());
                    } catch (NumberFormatException ignored) {
                        return wrongAnswer;
                    }

                    if (abs(words - clue.words) > 5) {
                        return new CheckResult(false,
                            "Wrong number of words. " +
                                "Should be " + clue.words + ", but found " + words);
                    }
                }
                if (line.contains("sentences:")) {

                    CheckResult wrongAnswer = new CheckResult(false, "Can't parse sentences count!" +
                        "\nYour output format should be like in examples.");
                    foundSentences = true;

                    String[] parsedLine = line.split(":");
                    if (parsedLine.length != 2) {
                        return wrongAnswer;
                    }

                    int sentences;
                    try {
                        sentences = (int) Double.parseDouble(parsedLine[1].strip());
                    } catch (NumberFormatException ignored) {
                        return wrongAnswer;
                    }

                    if (abs(sentences - clue.sentences) > 1) {
                        return new CheckResult(false,
                            "Wrong number of sentences. " +
                                "Should be " + clue.sentences + ", but found " + sentences);
                    }
                }
                if (line.contains("characters:")) {

                    CheckResult wrongAnswer = new CheckResult(false, "Can't parse characters count!" +
                        "\nYour output format should be like in examples.");
                    foundChars = true;

                    String[] parsedLine = line.split(":");
                    if (parsedLine.length != 2) {
                        return wrongAnswer;
                    }

                    int characters;
                    try {
                        characters = (int) Double.parseDouble(parsedLine[1].strip());
                    } catch (NumberFormatException ignored) {
                        return wrongAnswer;
                    }

                    if (abs(characters - clue.characters) > 10) {
                        return new CheckResult(false,
                            "Wrong number of characters. " +
                                "Should be " + clue.characters + ", but found " + characters);
                    }
                }
                if (line.contains("polysyllables:")) {

                    CheckResult wrongAnswer = new CheckResult(false, "Can't parse polysyllables count!" +
                        "\nYour output format should be like in examples.");
                    foundPolysyllables = true;

                    String[] parsedLine = line.split(":");
                    if (parsedLine.length != 2) {
                        return wrongAnswer;
                    }

                    int polysyllables;
                    try {
                        polysyllables = (int) Double.parseDouble(parsedLine[1].trim());
                    } catch (NumberFormatException ignored) {
                        return wrongAnswer;
                    }

                    if (abs(polysyllables - clue.polysyllables) > 5) {
                        return wrongAnswer;
                    }

                } else if (line.contains("syllables:")) {

                    CheckResult wrongAnswer = new CheckResult(false, "Can't parse syllables count!" +
                        "\nYour output format should be like in examples.");
                    foundSyllables = true;

                    String[] parsedLine = line.split(":");
                    if (parsedLine.length != 2) {
                        return wrongAnswer;
                    }

                    int syllables;
                    try {
                        syllables = (int) Double.parseDouble(parsedLine[1].strip());
                    } catch (NumberFormatException ignored) {
                        return wrongAnswer;
                    }

                    if (abs(syllables - clue.syllables) > 20) {
                        return new CheckResult(false,
                            "Wrong number of syllables. " +
                                "Should be " + clue.syllables + ", but found " + syllables);
                    }
                }

                if (line.startsWith("automated readability index")) {
                    foundARI = true;
                    int rounded = (int) clue.ari;
                    String actual = Integer.toString(rounded);
                    String before = Integer.toString(rounded - 1);
                    String after = Integer.toString(rounded + 1);
                    if (!(line.contains(actual)
                        || line.contains(before)
                        || line.contains(after))) {
                        return new CheckResult(false,
                            "Wrong Automated Readability Index score. " +
                                "Should be around " + clue.ari + ", your output:\n" + initialLine);
                    }
                    if (!line.contains("year") && !line.contains("old")) {
                        return new CheckResult(false,
                            "No age in Automated Readability Index");
                    }
                }

                if (line.startsWith("flesch-kincaid")) {
                    foundFKT = true;
                    int rounded = (int) clue.fkri;
                    String actual = Integer.toString(rounded);
                    String before = Integer.toString(rounded - 1);
                    String after = Integer.toString(rounded + 1);
                    if (!(line.contains(actual)
                        || line.contains(before)
                        || line.contains(after))) {
                        return new CheckResult(false,
                            "Wrong Flesch-Kincaid score. " +
                                "Should be around " + clue.fkri + ", your output:\n" + initialLine);
                    }
                    if (!line.contains("year") && !line.contains("old")) {
                        return new CheckResult(false,
                            "No age in Flesch-Kincaid");
                    }
                }

                if (line.startsWith("simple measure of gobbledygook")) {
                    foundSMG = true;
                    int rounded = (int) clue.smog;
                    String actual = Integer.toString(rounded);
                    String before = Integer.toString(rounded - 1);
                    String after = Integer.toString(rounded + 1);
                    if (!(line.contains(actual)
                        || line.contains(before)
                        || line.contains(after))) {
                        return new CheckResult(false,
                            "Wrong Simple Measure of Gobbledygook score. " +
                                "Should be around " + clue.smog + ", your output:\n" + initialLine);
                    }
                    if (!line.contains("year") && !line.contains("old")) {
                        return new CheckResult(false,
                            "No age in Simple Measure of Gobbledygook");
                    }
                }

                if (line.startsWith("coleman-liau")) {
                    foundCLI = true;
                    int rounded = (int) clue.cli;
                    String actual = Integer.toString(rounded);
                    String before = Integer.toString(rounded - 1);
                    String after = Integer.toString(rounded + 1);
                    if (!(line.contains(actual)
                        || line.contains(before)
                        || line.contains(after))) {
                        return new CheckResult(false,
                            "Wrong Coleman-Liau score. " +
                                "Should be around " + clue.cli + ", your output:\n" + initialLine);
                    }
                    if (!line.contains("year") && !line.contains("old")) {
                        return new CheckResult(false,
                            "No age in Coleman-Liau");
                    }
                }
            }

            if (!foundWords) {
                return new CheckResult(false,
                    "There is no words amount");
            }

            if (!foundSentences) {
                return new CheckResult(false,
                    "There is no sentences amount");
            }

            if (!foundChars) {
                return new CheckResult(false,
                    "There is no characters amount");
            }

            if (!foundSyllables) {
                return new CheckResult(false,
                    "There is no syllables in output");
            }

            if (!foundPolysyllables) {
                return new CheckResult(false,
                    "There is no polysyllables in output");
            }

            if (!foundARI) {
                return new CheckResult(false,
                    "There is no Automated Readability Index in output");
            }

            if (!foundFKT) {
                return new CheckResult(false,
                    "There is no Flesch-Kincaid readability tests in output");
            }

            if (!foundSMG) {
                return new CheckResult(false,
                    "There is no Simple Measure of Gobbledygook in output");
            }

            if (!foundCLI) {
                return new CheckResult(false,
                    "There is no Coleman-Liau index in output");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/readability/ReadabilityScorer.java
  visible: true
  text: |
    package readability;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.Scanner;

    public class ReadabilityScorer {
        private final static Scanner scanner = new Scanner(System.in);
        private String fileData;
        private double wordCount;
        private double sentenceCount;
        private double characterCount;
        private double syllableCount;
        private double polySyllableCount;
        private final ArrayList<String> SCORE_TYPES = new ArrayList<>();
        {
            SCORE_TYPES.add("ARI");
            SCORE_TYPES.add("FK");
            SCORE_TYPES.add("SMOG");
            SCORE_TYPES.add("CL");
            SCORE_TYPES.add("all");
        }
        private double ariScore;
        private double fkScore;
        private double smogScore;
        private double clScore;
        private double ariAge;
        private double fkAge;
        private double smogAge;
        private double clAge;

        public ReadabilityScorer(File file) {
            fileToString(file);
            readFile();
            printData();
            getScoreTypeFromUser();
        }

        private void printData() {
            // get counts and calculations
            countWords();
            countSentences();
            countCharacters();
            countSyllables();
            calculateAriScore();
            calculateFkScore();
            calculateSmogScore();
            calculateClScore();

            System.out.print("Words: ");
            System.out.println((int) getWordCount());

            System.out.print("Sentences: ");
            System.out.println((int) getSentenceCount());

            System.out.print("Characters: ");
            System.out.println((int) getCharacterCount());

            System.out.print("Syllables: ");
            System.out.println((int) getSyllableCount());

            System.out.print("Polysyllables: ");
            System.out.println((int) getPolySyllableCount());
        }

        private void getScoreTypeFromUser() {
            System.out.print("Enter the score you want to calculate (ARI, FK, SMOG, CL, all): ");
            String scoreType = scanner.nextLine();

            if (SCORE_TYPES.contains(scoreType)) {
                printScore(scoreType);
            }
        }

        private void printScore(String scoreType) {
            System.out.println();

            switch(scoreType) {
                case "ARI":
                    printAri();
                    break;

                case "FK":
                    printFk();
                    break;

                case "SMOG":
                    printSmog();
                    break;

                case "CL":
                    printCl();
                    break;

                case "all":
                    printAri();
                    printFk();
                    printSmog();
                    printCl();
                    printAverageAge();
                    break;
            }
        }

        private void printAri() {

            setAriAge(getAge(getAriScore()));

            System.out.printf("Automated Readability Index: %.2f", getAriScore());
            System.out.println(" (about " + (int)getAriAge() + "-year-olds)");
        }

        private void printFk() {

            setFkAge(getAge(getFkScore()));

            System.out.printf("Fleschâ€“Kincaid readability tests: %.2f", getFkScore());
            System.out.println(" (about " + (int)getFkAge() + "-year-olds)");
        }

        private void printSmog() {

            setSmogAge(getAge(getSmogScore()));

            System.out.printf("Simple Measure of Gobbledygook: %.2f", getSmogScore());
            System.out.println(" (about " + (int)getSmogAge() + "-year-olds)");
        }

        private void printCl() {

            setClAge(getAge(getClScore()));

            System.out.printf("Colemanâ€“Liau index: %.2f", getClScore());
            System.out.println(" (about " + (int)getClAge() + "-year-olds)");
        }

        private void printAverageAge() {

            double averageAge = (getAriAge() + getFkAge() + getSmogAge() + getClAge()) / 4;

            System.out.println();
            System.out.printf("This text should be understood in average by %.2f-year-olds.", averageAge);
        }

        private int getAge(double score) {

            int age;

            if (Math.ceil(score) < 14) {
                age = (int)Math.ceil(score) + 5;
            } else {
                age = (int)Math.ceil(score) + 8;
            }

            return age;
        }

        // turn the file into a string and set fileData variable to its value
        private void fileToString(File file) {
            StringBuilder fileData = new StringBuilder();

            try {
                Scanner reader = new Scanner(file);
                while (reader.hasNextLine()) {
                    String currentLine = reader.nextLine();
                    fileData.append(currentLine);
                }
                reader.close();
            }
            catch (FileNotFoundException fileNotFoundException) {
                System.out.println("File does not exist.");
            }

            setFileData(String.valueOf(fileData));
        }

        // print the text from the file
        private void readFile() {

            System.out.println("The text is:");
            System.out.println(getFileData());
            System.out.println();

        }

        // count words in the file
        private void countWords() {

            // splits sentences by a punctuation mark followed by a space
            String[] words = getFileData().split("\\s+");
            setWordCount(words.length);
        }

        // count sentences in the file
        private void countSentences() {

            // splits sentences by a punctuation mark followed by a space
            String[] sentences = getFileData().split("[.?!]\\s+");
            setSentenceCount(sentences.length);

        }

        // count characters in the file
        private void countCharacters() {

            String[] characters = getFileData().split("");

            double characterCount = 0;
            for (String character : characters) {
                if (!character.matches("\\s")) {
                    characterCount++;
                }
            }

            setCharacterCount(characterCount);

        }

        private void countSyllables() {

            // separate words whether there is punctuation or not
            String[] words = getFileData().split("[!-/]*\\s+[!-/]*");

            int totalSyllableCount = 0;
            int polySyllableCount = 0;

            for (String word : words) {
                int currentWordSyllableCount = Math.max(1, word.toLowerCase()
                        //in words that end with "e" replace
                        //"e" with ""
                        .replaceAll("e$", "") //e.g base=bas
                        //when two vowels appear together,
                        //replace them with "a"
                        .replaceAll("[aeiouy]{2}", "a") //e.g you == au,
                        //beautiful==bautiful
                        //again, when two vowels appear together,
                        //replace them with "a"
                        .replaceAll("[aeiouy]{2}", "a") //e.g au == a,
                        //bautiful==batiful
                        //replace any character that isn't aeiouy with ""
                        .replaceAll("[^aeiouy]", "") //e.g, batiful==aiu,
                        //a == a
                        .length() //aiu == 3 syllables, a == 1 syllable
                );
    //            System.out.println(word + ": " + currentWordSyllableCount);
                if (currentWordSyllableCount > 2) {
                    polySyllableCount++;
                }
                totalSyllableCount += currentWordSyllableCount;
            }

            setSyllableCount(totalSyllableCount);
            setPolySyllableCount(polySyllableCount);

        }

        private void calculateAriScore() {
            setAriScore(4.71 * getCharacterCount() / getWordCount() + 0.5 * getWordCount() / getSentenceCount() - 21.43);
        }

        private void calculateFkScore() {
            setFkScore(0.39 * getWordCount() / getSentenceCount() + 11.8 * getSyllableCount() / getWordCount() - 15.59);
        }

        private void calculateSmogScore() {
            setSmogScore(1.043 * (Math.sqrt(getPolySyllableCount() * 30 / getSentenceCount())) + 3.1291);
        }

        private void calculateClScore() {
            double s = getSentenceCount() / getWordCount() * 100;
            double l = getCharacterCount() / getWordCount() * 100;

            setClScore(0.0588 * l - 0.296 * s - 15.8);
        }

        // getters and setters


        private String getFileData() {
            return fileData;
        }

        private void setFileData(String fileData) {
            this.fileData = fileData;
        }

        private double getWordCount() {
            return wordCount;
        }

        private void setWordCount(double wordCount) {
            this.wordCount = wordCount;
        }

        private double getSentenceCount() {
            return sentenceCount;
        }

        private void setSentenceCount(double sentenceCount) {
            this.sentenceCount = sentenceCount;
        }

        private double getCharacterCount() {
            return characterCount;
        }

        private void setCharacterCount(double characterCount) {
            this.characterCount = characterCount;
        }

        private double getSyllableCount() {
            return syllableCount;
        }

        private void setSyllableCount(double syllableCount) {
            this.syllableCount = syllableCount;
        }

        private double getPolySyllableCount() {
            return polySyllableCount;
        }

        private void setPolySyllableCount(double polySyllableCount) {
            this.polySyllableCount = polySyllableCount;
        }

        private double getAriScore() {
            return ariScore;
        }

        private void setAriScore(double ariScore) {
            this.ariScore = ariScore;
        }

        public double getFkScore() {
            return fkScore;
        }

        public void setFkScore(double fkScore) {
            this.fkScore = fkScore;
        }

        public double getSmogScore() {
            return smogScore;
        }

        public void setSmogScore(double smogScore) {
            this.smogScore = smogScore;
        }

        public double getClScore() {
            return clScore;
        }

        public void setClScore(double clScore) {
            this.clScore = clScore;
        }

        public double getAriAge() {
            return ariAge;
        }

        public void setAriAge(double ariAge) {
            this.ariAge = ariAge;
        }

        public double getFkAge() {
            return fkAge;
        }

        public void setFkAge(double fkAge) {
            this.fkAge = fkAge;
        }

        public double getSmogAge() {
            return smogAge;
        }

        public void setSmogAge(double smogAge) {
            this.smogAge = smogAge;
        }

        public double getClAge() {
            return clAge;
        }

        public void setClAge(double clAge) {
            this.clAge = clAge;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5265#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 09 Sep 2022 20:02:39 UTC
record: -1
