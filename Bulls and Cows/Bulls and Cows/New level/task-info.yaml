type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BullsCowsTest extends StageTest<String> {

        // base test with 1 digit number
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output;
            int gotAnswer = 0;
            main.execute("1");
            main.execute("10");

            for (int i = 0; i <= 9; i++) {
                if (main.isFinished()) {
                    break; // if game has stopped, stop cycle and start check of results;
                }
                output = main.execute(Integer.toString(i));
                int[] result = getNumOfBullsAndCows(output);
                if (result[0] == 1) {
                    gotAnswer++; // if got a bull, count for an amount of answers
                }
            }

            // if we got less or more than 1 answer, the program work is incorrect
            if (gotAnswer != 1) {
                return CheckResult.wrong("The game has no answer or more than one. ");
            }

            return CheckResult.correct();
        }

        // standard bulls and cows game
        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("4");
            String output = main.execute("10");
            secretCheck(output, 4, 10);

            Character[] usedSymbols = getUsedSymbols(main, 4);
            boolean check = getPermutations(main, 4, usedSymbols);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 4 and 10 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // max length we can check
        @DynamicTestingMethod
        CheckResult test3() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("6");
            String output = main.execute("10");
            secretCheck(output, 6, 10);

            Character[] usedSymbols = getUsedSymbols(main, 6);
            boolean check = getPermutations(main, 6, usedSymbols);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 6 and 10 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // this stage test
        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("4");
            String output = main.execute("16");
            secretCheck(output, 4, 16);

            Character[] usedSymbols = getUsedSymbols(main, 4);
            boolean check = getPermutations(main, 4, usedSymbols);
            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 4 and 16 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // test of usage of full dictionary
        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            main.start();

            main.execute("6");
            String output = main.execute("36");
            secretCheck(output, 6, 36);

            Character[] usedSymbols = getUsedSymbols(main, 6);
            boolean check = getPermutations(main, 6, usedSymbols);
            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 6 and 36 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        void secretCheck(String output, int length, int dictLen) {
            String secret = new String(new char[length]).replace('\0', '*');
            output = output.toLowerCase();

            if (!output.contains(secret)) {
                throw new WrongAnswer("The length of secret code is incorrect.");
            }

            String firstChar = "0";
            String lastChar;
            if (dictLen <= 10) {
                lastChar = "" + ((char) (47 + dictLen));
            } else {
                lastChar = "" + ((char) (86 + dictLen));
            }

            if (!(output.contains(firstChar) && output.contains(lastChar))) {
                throw new WrongAnswer("The range of possible symbols " +
                        "in the secret code is incorrect. " +
                        "For the " + dictLen + " possible symbols " +
                        "the last symbol should be '" + lastChar + "'.");
            }
        }


        Character[] getUsedSymbols(TestedProgram main, int length) {
            Character[] symbols = new Character[length];
            char[] dictionary = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                    'u', 'v', 'w', 'x', 'y', 'z'};
            int[] result;

            int index = 0;
            String input;
            String output;

            for (char c : dictionary) {
                input = new String(new char[length]).replace('\0', c);
                output = main.execute(input);
                result = getNumOfBullsAndCows(output);

                if (result[0] > 1) {
                    throw new WrongAnswer("Seems like " +
                            "the calculation of bulls isn't right. " +
                            "For the guess \"" + input + "\" there can be 1 bull at max.");
                }

                if (result[0] == 1) {
                    symbols[index++] = c;
                }
                if (index == length) {
                    break;
                }
            }

            if (index != length) {
                throw new WrongAnswer(
                        "Output should contain " + length + " bulls " +
                        "summarized as every option was tried. Found: " + index
                );
            }

            return symbols;
        }


        // permutations one by one
        public boolean getPermutations(TestedProgram main, int length, Character[] elements) {
            int[] indexes = new int[length];
            for (int i = 0; i < length; i++) {
                indexes[i] = 0;
            }

            String output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
            int[] result = getNumOfBullsAndCows(output);
            if (result[0] == length) {
                return true;
            }

            int i = 0;
            while (i < length) {
                if (indexes[i] < i) {
                    swap(elements, i % 2 == 0 ? 0 : indexes[i], i);
                    output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
                    result = getNumOfBullsAndCows(output);
                    if (result[0] == length) {
                        return true;
                    }
                    indexes[i]++;
                    i = 0;
                } else {
                    indexes[i] = 0;
                    i++;
                }
            }
            return false;
        }

        // get number of bulls and cows from user program's output
        int[] getNumOfBullsAndCows(String userString) {
            Matcher nonePattern = Pattern.compile("\\b[nN]one\\b").matcher(userString);
            Matcher cowsPattern = Pattern.compile("\\b\\d [cC]ow").matcher(userString);
            Matcher bullsPattern = Pattern.compile("\\b\\d [bB]ull").matcher(userString);
            Pattern oneNumPattern = Pattern.compile("\\d");

            if (nonePattern.find()) {
                return new int[]{0, 0};
            }

            int[] ans = {0, 0};
            boolean found = false;

            if (bullsPattern.find()) {
                String temp = bullsPattern.group();
                Matcher oneNumBulls = oneNumPattern.matcher(temp);
                oneNumBulls.find();
                ans[0] = Integer.parseInt(oneNumBulls.group());
                found = true;
            }

            if (cowsPattern.find()) {
                String temp = cowsPattern.group();
                Matcher oneNumCows = oneNumPattern.matcher(temp);
                oneNumCows.find();
                ans[1] = Integer.parseInt(oneNumCows.group());
                found = true;
            }

            if (!found) {
                throw new WrongAnswer(
                        "Cannot find number of bulls or number of cows or None after the input."
                );
            }

            return ans;
        }

        private static void swap(Character[] input, int a, int b) {
            char tmp = input[a];
            input[a] = input[b];
            input[b] = tmp;
        }
    }
  learner_created: false
- name: src/bullscows/SecretCode.java
  visible: true
  text: |+
    package bullscows;

    import java.util.ArrayList;
    import java.util.Random;
    import java.util.Scanner;

    public class SecretCode {
        private boolean isValidSecretCode;
        private final Scanner scanner = new Scanner(System.in);
        private int secretCodeLength;
        private int numberOfPossibleSymbols;
        private final ArrayList<Character> secretCode = new ArrayList<>();

        public SecretCode() {

            getSecretCodeChoices();
            getUserParameters();
            setValidSecretCode(false);

            while (!isValidSecretCode) {
                setValidSecretCode(setSecretCode());
            }

            printGameStartMessage();

    //        // print the secret code
    //        System.out.print("The random secret number is ");
    //        for (int n : getSecretCode()) {
    //            System.out.print(n);
    //        }
    //        System.out.print(".");
        }

        private void printGameStartMessage() {
            System.out.print("The secret is prepared: ");

            for (int i = 0; i < getSecretCodeLength(); i++) {
                System.out.print("*");
            }
            System.out.println(" (0-9, a-f).");
            System.out.println("Okay, let's start a game!");
        }

        private ArrayList<Character> getSecretCodeChoices() {
            ArrayList<Character> secretCodeChoices = new ArrayList<>();

            char currChar = '0';

            for (int i = 0; i < 10; i++) {
                secretCodeChoices.add(currChar);
                currChar++;
            }

            currChar = 'a';

            for (int i = 0; i < 26; i++) {
                secretCodeChoices.add(currChar);
                currChar++;
            }

            return secretCodeChoices;
        }

        private void getUserParameters() {
            System.out.println("Input the length of the secret code:");
            int codeLength = scanner.nextInt();
            while (codeLength > 36) {
                System.out.println("Error: can't generate a secret number with a length of " + codeLength + " because there aren't enough unique digits.");
                codeLength = scanner.nextInt();
            }

            System.out.println("Input the number of possible symbols in the code:");
            int numberOfParameters = scanner.nextInt();

            setSecretCodeLength(codeLength);
            setNumberOfPossibleSymbols(numberOfParameters);
        }

        private ArrayList<Integer> getRandomSymbolIndices() {
            ArrayList<Integer> randomSymbolIndices = new ArrayList<>();
            Random random = new Random();

            int numberOfIndicesAdded = 0;
            while (numberOfIndicesAdded < getNumberOfPossibleSymbols()) {
                int randomNumber = random.nextInt(36);
                if (!randomSymbolIndices.contains(randomNumber)) {
                    randomSymbolIndices.add(randomNumber);
                    numberOfIndicesAdded++;
                }
            }

            return randomSymbolIndices;
        }

    //    private long getRandomNumber() {
    //
    //        // create array of (numberOfParameters) random numbers between 0 and 36
    //        // fill secret code array up with (codeLength) characters based on their index from array mentioned above
    //
    //        Random random = new Random();
    //        int upperBound = Integer.MAX_VALUE;
    //        int lowerBound = Integer.MAX_VALUE - 1000000000;
    //
    //        return random.nextInt(upperBound - lowerBound) + lowerBound;
    //    }

        private boolean setSecretCode() {

            ArrayList<Integer> randomSymbolIndices = getRandomSymbolIndices();

            for (int i = 0; i < getSecretCodeLength(); i++) {
                secretCode.add(getSecretCodeChoices().get(randomSymbolIndices.get(i)));
            }

            return true;

    //        String pseudoRandomNumberString = String.valueOf(getRandomNumber());
    //
    //        for (int i = pseudoRandomNumberString.length() - 1; i >= 0; i--) {
    //            if (secretCode.size() < getSecretCodeLength()) {
    //                char currentNumberAsString = pseudoRandomNumberString.charAt(i);
    //                int currentNumber = Character.getNumericValue(currentNumberAsString);
    //                // make sure first digit isn't 0
    //                if (i == pseudoRandomNumberString.length() - 1 && currentNumber == 0) {
    //                    continue;
    //                }
    //                // add to secretCode array if number doesn't already exist
    //                if (!secretCode.contains(currentNumber)) {
    //                    secretCode.add(currentNumber);
    //                }
    //            } else {
    //                break;
    //            }
    //        }
    //
    //        if (secretCode.size() < getSecretCodeLength()) {
    //            secretCode.clear();
    //            return false;
    //        } else {
    //            return true;
    //        }
        }

        protected ArrayList<Character> getSecretCode() {
            return secretCode;
        }

        public int getSecretCodeLength() {
            return secretCodeLength;
        }

        public void setSecretCodeLength(int secretCodeLength) {
            this.secretCodeLength = secretCodeLength;
        }

        public int getNumberOfPossibleSymbols() {
            return numberOfPossibleSymbols;
        }

        public void setNumberOfPossibleSymbols(int numberOfPossibleSymbols) {
            this.numberOfPossibleSymbols = numberOfPossibleSymbols;
        }

        public boolean isValidSecretCode() {
            return isValidSecretCode;
        }

        public void setValidSecretCode(boolean validSecretCode) {
            isValidSecretCode = validSecretCode;
        }
    }

  learner_created: true
- name: src/bullscows/BullsAndCows.java
  visible: true
  text: |-
    package bullscows;

    import java.util.ArrayList;
    import java.util.Scanner;
    public class BullsAndCows {
        private boolean gameOver;
        // generate the secret code
        private final SecretCode secretCode = new SecretCode();
        private final Scanner scanner = new Scanner(System.in);
        private ArrayList<Character> userGuess = new ArrayList<>();
        private int turnNumber = 1;

        public BullsAndCows() {
            setGameOver(false);

            while(!isGameOver()) {
                printTurn();
                getUserInput();
                gradeUserInput();
            }

            System.out.println("Congratulations! You guessed the secret code.");
        }

        private void printTurn() {
            System.out.println("Turn " + getTurnNumber() + ":");
            setTurnNumber(getTurnNumber() + 1);
        }

        private void printGrade(int cowCount, int bullCount) {

            System.out.print("Grade: ");

            if (cowCount == 1 && bullCount == 1) {
                System.out.println(bullCount + " bull and " + cowCount + " cow. ");
            } else if (cowCount > 1 && bullCount > 1) {
                System.out.println(bullCount + " bulls and " + cowCount + " cows. ");
            } else if (bullCount == 1) {
                System.out.println(bullCount + " bull. ");
            } else if (bullCount > 1) {
                System.out.println(bullCount + " bulls. ");
            } else if (cowCount == 1) {
                System.out.println(cowCount + " cow. ");
            } else if (cowCount > 1) {
                System.out.println(cowCount + " cows. ");
            } else {
                System.out.println("None. ");
            }

    //        // print the secret code
    //        System.out.print("The secret code is ");
    //        for (int n : secretCode.getSecretCode()) {
    //            System.out.print(n);
    //        }
    //        System.out.print(".");
        }

        private void gradeUserInput() {
            int cowCount = 0;
            int bullCount = 0;

            for (int i = 0; i < getUserGuess().size(); i++) {
                char userGuessAtIndex = getUserGuess().get(i);
                char secretCodeAtIndex = secretCode.getSecretCode().get(i);
                // test for bulls - same number at same index
                if (userGuessAtIndex == secretCodeAtIndex) {
                    bullCount++;
                    // test for cows - same number at different index
                } else if (secretCode.getSecretCode().contains(userGuessAtIndex)) {
                    cowCount++;
                }
            }

            // set game over if all bulls
            if (bullCount == secretCode.getSecretCodeLength()) {
                setGameOver(true);
            }

            // print out grade
            printGrade(cowCount, bullCount);
        }
        private void getUserInput() {
            ArrayList<Character> userInput = new ArrayList<>();

            // split next line of user input into string array
            String userInputString = scanner.nextLine();

            // convert to ints and add to userInputArr
            for (int i = 0; i < userInputString.length(); i++) {
                userInput.add(userInputString.charAt(i));
            }

            setUserGuess(userInput);
        }

        // getters and setters

        private ArrayList<Character> getUserGuess() {
            return userGuess;
        }

        private void setUserGuess(ArrayList<Character> userGuess) {
            this.userGuess = userGuess;
        }

        public boolean isGameOver() {
            return gameOver;
        }

        public void setGameOver(boolean gameOver) {
            this.gameOver = gameOver;
        }

        public int getTurnNumber() {
            return turnNumber;
        }

        public void setTurnNumber(int turnNumber) {
            this.turnNumber = turnNumber;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5434#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 21 Aug 2022 15:36:43 UTC
record: -1
