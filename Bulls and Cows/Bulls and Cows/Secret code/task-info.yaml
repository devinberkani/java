type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/bullscows/SecretCode.java
  visible: true
  text: |
    package bullscows;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class SecretCode {

        private boolean isValidSecretCode;
        private final Scanner scanner = new Scanner(System.in);
        private int userInputSecretCodeLength;
        private final ArrayList<Integer> secretCode = new ArrayList<>();

        public SecretCode() {

            getSecretCodeLengthFromUser();
            setValidSecretCode(false);

            while (!isValidSecretCode) {
                setValidSecretCode(setSecretCode());
            }

            // print the secret code
            System.out.print("The random secret number is ");
            for (int n : getSecretCode()) {
                System.out.print(n);
            }
            System.out.print(".");
        }

        private void getSecretCodeLengthFromUser() {
            int codeLength = scanner.nextInt();
            while (codeLength > 10) {
                System.out.println("Error: can't generate a secret number with a length of " + codeLength + " because there aren't enough unique digits.");
                codeLength = scanner.nextInt();
            }
            setUserInputSecretCodeLength(codeLength);
        }

        private long getRandomNumber() {
            long pseudoRandomNumber = System.nanoTime();

            while (pseudoRandomNumber < getUserInputSecretCodeLength()) {
                pseudoRandomNumber = System.nanoTime();
            }

            return pseudoRandomNumber;
        }

        // generate secret code of numbers between 0-9
        private boolean setSecretCode() {

            String pseudoRandomNumberString = String.valueOf(getRandomNumber());

            for (int i = pseudoRandomNumberString.length() - 1; i >= 0; i--) {
                if (secretCode.size() < getUserInputSecretCodeLength()) {
                    char currentNumberAsString = pseudoRandomNumberString.charAt(i);
                    int currentNumber = Character.getNumericValue(currentNumberAsString);
                    // make sure first digit isn't 0
                    if (i == pseudoRandomNumberString.length() - 1 && currentNumber == 0) {
                        continue;
                    }
                    // add to secretCode array if number doesn't already exist
                    if (!secretCode.contains(currentNumber)) {
                        secretCode.add(currentNumber);
                    }
                } else {
                    break;
                }
            }

            if (secretCode.size() < getUserInputSecretCodeLength()) {
                secretCode.clear();
                return false;
            } else {
                return true;
            }

    //        Random random = new Random();
    //        int upperBound = 10;
    //
    //        // fill secretCode array
    //        for (int i = 0; i < 4; i++) {
    //            secretCode.add(random.nextInt(upperBound));
    //        }
        }

        protected ArrayList<Integer> getSecretCode() {
            return secretCode;
        }

        public int getUserInputSecretCodeLength() {
            return userInputSecretCodeLength;
        }

        public void setUserInputSecretCodeLength(int userInputSecretCodeLength) {
            this.userInputSecretCodeLength = userInputSecretCodeLength;
        }

        public boolean isValidSecretCode() {
            return isValidSecretCode;
        }

        public void setValidSecretCode(boolean validSecretCode) {
            isValidSecretCode = validSecretCode;
        }
    }
  learner_created: true
- name: src/bullscows/BullsAndCows.java
  visible: true
  text: |
    package bullscows;

    import java.util.ArrayList;
    import java.util.Scanner;
    public class BullsAndCows {

        // generate the secret code
        private final SecretCode secretCode = new SecretCode();
        private final Scanner scanner = new Scanner(System.in);
        private ArrayList<Integer> userGuess = new ArrayList<>();

        public BullsAndCows() {
    //        getUserInput();
    //        gradeUserInput();
        }

        private void printGrade(int cowCount, int bullCount) {

            System.out.print("Grade: ");

            if (cowCount > 0 && bullCount > 0) {
                System.out.print(bullCount + " bull(s) and " + cowCount + " cow(s). ");
            } else if (bullCount > 0) {
                System.out.print(bullCount + " bull(s). ");
            } else if (cowCount > 0) {
                System.out.print(cowCount + " cow(s). ");
            } else {
                System.out.print("None. ");
            }

            // print the secret code
            System.out.print("The secret code is ");
            for (int n : secretCode.getSecretCode()) {
                System.out.print(n);
            }
            System.out.print(".");
        }

        private void gradeUserInput() {
            int cowCount = 0;
            int bullCount = 0;

            for (int i = 0; i < getUserGuess().size(); i++) {
                int userGuessAtIndex = getUserGuess().get(i);
                int secretCodeAtIndex = secretCode.getSecretCode().get(i);
                // test for bulls - same number at same index
                if (userGuessAtIndex == secretCodeAtIndex) {
                    bullCount++;
                    // test for cows - same number at different index
                } else if (secretCode.getSecretCode().contains(userGuessAtIndex)) {
                    cowCount++;
                }
            }
            // print out grade
            printGrade(cowCount, bullCount);
        }
        private void getUserInput() {
            ArrayList<Integer> userInput = new ArrayList<>();

            // split next line of user input into string array
            String[] userInputStringArr = scanner.nextLine().split("");

            // convert to ints and add to userInputArr
            for (String s : userInputStringArr) {
                userInput.add(Integer.parseInt(s));
            }

            setUserGuess(userInput);
        }

        // getters and setters

        private ArrayList<Integer> getUserGuess() {
            return userGuess;
        }

        private void setUserGuess(ArrayList<Integer> userGuess) {
            this.userGuess = userGuess;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/53/stages/289/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 20 Aug 2022 21:11:38 UTC
record: -1
